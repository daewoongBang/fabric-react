{"version":3,"sources":["Polygon.js","App.js","index.js"],"names":["Polygon","canvasEl","useRef","useState","canvas","setCanvas","lines","setLines","lineCount","setLineCount","circles","setCircles","polygonPoints","setpolygonPoints","isEdit","setEdit","type","background","border","drawingObject","setDrawingObject","handleEditPolygonButtonClick","useCallback","activePolygon","findPolygon","edit","cornerStyle","hasControls","makeCircles","points","controls","fabric","Object","prototype","forEach","value","remove","requestRenderAll","handleClearButtonClick","clear","handleMouseUp","options","x","pointer","y","concat","line","Line","strokeWidth","selectable","stroke","add","handleMouseDown","getActiveObject","get","handleMouseMove","set","x2","y2","renderAll","handleObjectMoving","target","polygon","circle","name","getCenterPoint","handleMouseDoubleClick","splice","length","makePolygon","handleMouseOver","window","console","log","handleObjectModified","getPolygonPoints","initialize","newPolygon","left","top","forEachObject","object","getLeftPosition","getTopPosition","fill","hasBorders","objectCaching","selection","index","tempCircles","point","Circle","radius","originX","originY","hoverCursor","matrix","calcTransformMatrix","map","p","Point","pathOffset","util","transformPoint","result","height","i","Math","abs","width","useEffect","off","on","fabricCanvas","Canvas","current","setWidth","setHeight","setBackgroundColor","onClick","disabled","ref","style","marginLeft","toString","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6b835ea.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { fabric } from 'fabric';\n\nconst Polygon = () => {\n  const canvasEl = useRef();\n  const [canvas, setCanvas] = useState();\n  const [lines, setLines] = useState([]);\n  const [lineCount, setLineCount] = useState(0);\n  const [circles, setCircles] = useState([]);\n  const [polygonPoints, setpolygonPoints] = useState([]);\n  const [isEdit, setEdit] = useState(false);\n  const [drawingObject, setDrawingObject] = useState({\n    type: '',\n    background: '',\n    border: ''\n  });\n\n  const handleDrawPolygonButtonClick = () => {\n    canvas.forEachObject(object => {\n      canvas.remove(object);\n    });\n    if (drawingObject.type === 'polygon') {\n      setDrawingObject({ ...drawingObject, type: '' });\n    } else {\n      setDrawingObject({ ...drawingObject, type: 'polygon' });\n    }\n  };\n\n  const handleEditPolygonButtonClick = useCallback(() => {\n    const activePolygon = findPolygon();\n\n    if (activePolygon) {\n      activePolygon.edit = !activePolygon.edit;\n      setEdit(activePolygon.edit);\n\n      if (activePolygon.edit) {\n        activePolygon.cornerStyle = 'circle';\n        activePolygon.hasControls = false;\n\n        makeCircles(activePolygon.points);\n      } else {\n        activePolygon.cornerStyle = 'rect';\n        activePolygon.controls = fabric.Object.prototype.controls;\n\n        circles.forEach(value => {\n          canvas.remove(value);\n        });\n        setCircles([]);\n      }\n\n      canvas.requestRenderAll();\n    }\n\n    // eslint-disable-next-line\n  }, [canvas, circles]);\n\n  const handleClearButtonClick = useCallback(() => {\n    setEdit(false);\n    canvas.clear();\n  }, [canvas]);\n\n  const handleMouseUp = useCallback(\n    options => {\n      if (drawingObject.type === 'polygon') {\n        const x = options.pointer.x;\n        const y = options.pointer.y;\n\n        setpolygonPoints(\n          polygonPoints.concat({\n            x: x,\n            y: y\n          })\n        );\n\n        const points = [x, y, x, y];\n        const line = new fabric.Line(points, {\n          strokeWidth: 2,\n          selectable: false,\n          stroke: 'rgba(0, 255, 0, 0.5)'\n        });\n\n        setLines(lines.concat(line));\n        setLineCount(lineCount + 1);\n        canvas.add(line);\n      }\n    },\n    // eslint-disable-next-line\n    [canvas, drawingObject, polygonPoints, lines, lineCount]\n  );\n\n  const handleMouseDown = useCallback(\n    options => {\n      const activePolygon = canvas.getActiveObject();\n\n      if (\n        activePolygon &&\n        activePolygon.get('type') === 'polygon' &&\n        activePolygon.edit\n      ) {\n        circles.forEach(value => {\n          canvas.remove(value);\n        });\n      }\n    },\n    [canvas, circles]\n  );\n\n  const handleMouseMove = useCallback(\n    options => {\n      if (lines[0] && drawingObject.type === 'polygon') {\n        lines[lineCount - 1].set({\n          x2: options.pointer.x,\n          y2: options.pointer.y\n        });\n        canvas.renderAll();\n      }\n    },\n    // eslint-disable-next-line\n    [canvas, drawingObject, lines, lineCount]\n  );\n\n  const handleObjectMoving = useCallback(\n    options => {\n      if (options.target.get('type') === 'circle') {\n        const polygon = findPolygon();\n        const circle = options.target;\n\n        polygon.points[circle.name] = {\n          x: circle.getCenterPoint().x,\n          y: circle.getCenterPoint().y\n        };\n      }\n    },\n    // eslint-disable-next-line\n    [canvas]\n  );\n\n  const handleMouseDoubleClick = useCallback(() => {\n    if (drawingObject.type === 'polygon') {\n      setDrawingObject({ ...drawingObject, type: '' });\n\n      lines.forEach(value => {\n        canvas.remove(value);\n      });\n\n      polygonPoints.splice(polygonPoints.length - 1);\n      const polygon = makePolygon(polygonPoints);\n      canvas.add(polygon);\n      canvas.renderAll();\n\n      //clear\n      setpolygonPoints([]);\n      setLines([]);\n      setLineCount(0);\n    }\n\n    // eslint-disable-next-line\n  }, [canvas, drawingObject, lines, polygonPoints]);\n\n  const handleMouseOver = useCallback(\n    options => {\n      options.target &&\n        window.console.log('target', options.target.get('type'));\n    },\n    // eslint-disable-next-line\n    [canvas]\n  );\n\n  const handleObjectModified = useCallback(\n    options => {\n      const activePolygon = findPolygon();\n\n      if (activePolygon) {\n        const points = getPolygonPoints();\n        activePolygon.initialize(points);\n\n        const newPolygon = makePolygon(points);\n        newPolygon.left = activePolygon.left;\n        newPolygon.top = activePolygon.top;\n        newPolygon.edit = activePolygon.edit;\n\n        canvas.forEachObject(object => {\n          canvas.remove(object);\n        });\n\n        canvas.add(newPolygon);\n\n        if (newPolygon.edit) {\n          const points = getPolygonPoints();\n          makeCircles(points);\n        }\n\n        canvas.renderAll();\n      }\n    },\n    // eslint-disable-next-line\n    [canvas]\n  );\n\n  const makePolygon = useCallback(\n    points => {\n      const polygon = new fabric.Polygon(points, {\n        left: getLeftPosition(polygonPoints),\n        top: getTopPosition(polygonPoints),\n        fill: 'rgba(0, 255, 0, 0.1)',\n        hasBorders: false,\n        hasControls: false,\n        objectCaching: false,\n        selection: false,\n        index: 0\n      });\n\n      return polygon;\n    },\n    // eslint-disable-next-line\n    [canvas, polygonPoints]\n  );\n\n  const makeCircles = useCallback(\n    points => {\n      let tempCircles = [];\n      points.forEach((point, index) => {\n        const circle = new fabric.Circle({\n          radius: 5,\n          fill: 'rgba(0, 255, 0, 0.8)',\n          left: point.x,\n          top: point.y,\n          originX: 'center',\n          originY: 'center',\n          hasBorders: false,\n          hasControls: false,\n          selection: false,\n          name: index,\n          index: index,\n          hoverCursor: 'pointer'\n        });\n        tempCircles = tempCircles.concat(circle);\n        canvas.add(circle);\n      });\n      setCircles(tempCircles);\n    },\n    // eslint-disable-next-line\n    [canvas]\n  );\n\n  const findPolygon = useCallback(() => {\n    let polygon = null;\n\n    canvas.forEachObject(object => {\n      if (object.get('type') === 'polygon') {\n        polygon = object;\n      }\n    });\n\n    return polygon;\n\n    // eslint-disable-next-line\n  }, [canvas, circles]);\n\n  const getPolygonPoints = useCallback(() => {\n    const polygon = findPolygon();\n\n    const matrix = polygon.calcTransformMatrix();\n    const points = polygon\n      .get('points')\n      .map(p => {\n        return new fabric.Point(\n          p.x - polygon.pathOffset.x,\n          p.y - polygon.pathOffset.y\n        );\n      })\n      .map(p => {\n        return fabric.util.transformPoint(p, matrix);\n      });\n\n    return points;\n    // eslint-disable-next-line\n  }, [canvas]);\n\n  const getTopPosition = useCallback(\n    points => {\n      let result = canvas.height;\n\n      for (let i = 0; i < lineCount; i++) {\n        if (points[i].y < result) {\n          result = points[i].y;\n        }\n      }\n      return Math.abs(result);\n    },\n    [canvas, lineCount]\n  );\n\n  const getLeftPosition = useCallback(\n    points => {\n      let result = canvas.width;\n      for (let i = 0; i < lineCount; i++) {\n        if (points[i].x < result) {\n          result = points[i].x;\n        }\n      }\n      return Math.abs(result);\n    },\n    [canvas, lineCount]\n  );\n\n  useEffect(() => {\n    if (canvas) {\n      canvas.off('mouse:up');\n      canvas.off('mouse:down');\n      canvas.off('mouse:move');\n      canvas.off('mouse:dblclick');\n      canvas.off('object:moving');\n      canvas.off('object:modified');\n      canvas.off('mouse:over');\n\n      canvas.on('mouse:up', handleMouseUp);\n      canvas.on('mouse:down', handleMouseDown);\n      canvas.on('mouse:move', handleMouseMove);\n      canvas.on('mouse:dblclick', handleMouseDoubleClick);\n      canvas.on('object:moving', handleObjectMoving);\n      canvas.on('object:modified', handleObjectModified);\n      canvas.on('mouse:over', handleMouseOver);\n    }\n\n    // eslint-disable-next-line\n  }, [canvas, drawingObject, polygonPoints, lines, circles, lineCount]);\n\n  useEffect(() => {\n    if (canvas) {\n      setCanvas(canvas);\n    } else {\n      const fabricCanvas = new fabric.Canvas(canvasEl.current, {\n        selection: false\n      });\n\n      fabricCanvas\n        .setWidth(500)\n        .setHeight(500)\n        .setBackgroundColor('#ffffff')\n        .renderAll();\n\n      window.console.log('fabricCanvas', fabricCanvas);\n      setCanvas(fabricCanvas);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <button\n          onClick={handleDrawPolygonButtonClick}\n          disabled={drawingObject.type !== '' || isEdit}\n        >\n          Draw Polygon\n        </button>\n        <button\n          onClick={handleEditPolygonButtonClick}\n          disabled={drawingObject.type !== ''}\n        >\n          Edit Polygon\n        </button>\n        <button\n          onClick={handleClearButtonClick}\n          disabled={drawingObject.type !== ''}\n        >\n          clear\n        </button>\n\n        <canvas\n          ref={canvasEl}\n          style={{\n            border: '1px solid black'\n          }}\n        />\n      </div>\n      <div\n        style={{\n          marginLeft: '10px'\n        }}\n      >\n        <p>drawingObject type : {drawingObject.type}</p>\n        <p>isEdit : {isEdit.toString()}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Polygon;\n","import React from 'react';\nimport Polygon from './Polygon';\n\nfunction App() {\n  return <Polygon />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}